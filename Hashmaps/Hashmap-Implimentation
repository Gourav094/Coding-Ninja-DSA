#include <bits/stdc++.h>
using namespace std;
template<typename V>
class Node{
    public:
    string key;
    V value;
    Node* next;
    Node(string key,V value){
        this->key=key;
        this->value=value;
        next=NULL;
    }
    ~Node(){
        delete next;
    }

};
template<typename V>
class ourmap{
    int count;
    int bucketsize;
    Node<V>** bucket;
    public:
    ourmap(){
        count=0;
        bucketsize=5;
        bucket=new Node<V>*[bucketsize];
        for(int i=0;i<bucketsize;i++){
            bucket[i]=NULL;
        }
    }
    ~ourmap(){
        for(int i=0;i<bucketsize;i++){
            delete bucket[i];
        }
        delete []bucket;
    }
    int size(){
        return count;
    }
    private:
    Hash(string key){
        int hashcode=0;
        int current=1;
        for(int i=key.length()-1 ; i >= 0 ;i--){
            hashcode+=key[i]*current;
            hashcode=hashcode % bucketsize;
            current *= 37;
            current = current % bucketsize;
        }
        return hashcode % bucketsize;
    }
    public:
    void insert(string key,V value){
        int bucketIndex=Hash(key);
        Node<V>* head=bucket[bucketIndex];
        while(head != NULL){
            if(head->key == key){
                head->value=value;
                return;
            }
            head=head->next;
        }
        Node<V>* node=new Node<V>(key,value);
        node->next=head;
        bucket[bucketIndex]=node;
        count++;
    }
    V remove(string key){
        int bucketIndex=Hash(key);
        Node<V>* head=bucket[bucketIndex];
        Node<V>* prev=NULL;
        while(head != NULL){
            if(head->key == key){
                if(prev == NULL){
                    bucket[bucketIndex]=head->next;
                }
                else{
                    prev->next=head->next;
                }
                V value=head->value;
                head->next=NULL;
                delete head;
                return value;
            }
            prev=head;
            head=head->next;
        }
        return 0;
    }
    V getValue(string key){
        int bucketIndex=Hash(key);
        Node<V>* head=bucket[bucketIndex];
        while(head != NULL){
            if(head->key == key){
                return head->value;
            }
            head=head->next;
        }
        return 0;
    }
};

int main()
{
    ourmap<int> m;
    m.insert("abc",1);
    // m.insert("abc2",2);
    m.insert("abc3",3);
    m.insert("abc2",5);
    cout<<"size: "<<m.size()<<endl;
    cout<<"remove: "<<m.remove("abc2")<<endl;
    cout<<m.getValue("abc")<<" ";
    cout<<m.getValue("abc3")<<" ";
    cout<<"size: "<<m.size()<<endl;
    return 0;
}
