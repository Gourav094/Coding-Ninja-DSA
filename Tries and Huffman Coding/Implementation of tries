#include <bits/stdc++.h>
using namespace std;
class trieNode
{
    public:
    char data;
    bool isterminal;
    trieNode **children;
    trieNode(char data){
        this->data=data;
        isterminal=false;
        children =new trieNode*[26];
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
    }
};
class trie{
    trieNode* root;
    public:
    trie(){
        root=new trieNode('\0');
    }
    void insertword(trieNode* root,string word){
        if(word.size()==0){
            root->isterminal=true;
            return ;
        }
        int index=word[0]-'a';
        trieNode *child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            child=new trieNode(word[0]);
            root->children[index]=child;
        }
        insertword(child,word.substr(1));
    }
    bool searchword(trieNode* root,string word){
        int index=word[0]-'a';
        if(word.size()==1){
            return root->children[index]->isterminal;
        }
        if(root->children[index] ==NULL){
            return false;
        }
        
        return searchword(root->children[index],word.substr(1));
    }

    void Deleteword(trieNode* root,string word){
        if(word.length()==0){
            root->isterminal=false;
            return;
        }
        int index=word[0]-'a';
        trieNode* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            return;
        }
        Deleteword(child,word.substr(1));
        if(child->isterminal==false){
            for(int i=0;i<26;i++){
                if(child->children[i] !=NULL){
                    return;
                }
            }
            delete child;
            root->children[index]=NULL;
        }
    }
    void insert(string word){
        return insertword(root,word);
    }
    bool search(string word){
        return searchword(root,word);
    }
    void Delete(string word){
        return Deleteword(root,word);
    }
};

int main()
{
    trie t;
    t.insert("are");
    t.insert("and");
    t.insert("this");
    cout<<t.search("this")<<endl;
    t.Delete("this");
    cout<<t.search("this")<<endl;


    return 0;
}
