//Here a function to append the last 'N' nodes towards the front of the singly linked list and returns the new head to the list.
#include <bits/stdc++.h>
using namespace std;
class node{
    public:
    int data;
    node *next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};

int getlength(node *head){
    node *temp=head;
    int count=0;
    while(temp!=NULL){
        count++;
        temp=temp->next;
    }
    return count;
}
node* Append(node *head,int n){
    node *temp=head;
    int l=getlength(head);
    int count=l-n;
    for(int i=0;i<count-1;i++){
        temp=temp->next;
    }
    node *head2=temp->next;
    node *tail=head2;
    temp->next=NULL;
    while(tail->next !=NULL){
        tail=tail->next;
        
    }
    tail->next=head;
    return head2;
}


node *takeinput(){
    int data;
    cin>>data;
    node *head=NULL;
    node *tail=NULL;
    while(data!=-1){
        node *n=new node(data);
        if(head==NULL){
            head=n;
            tail=n;
        }
        else{
            tail->next=n;
            tail=n;
        }
        cin>>data;
    }
    return head;
}

void print(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }cout<<endl;
}
int main()
{
    int q; //no of queries
    cin>>q;
    while(q--){
        node *n=takeinput();
        int i;
        cin>>i;
        node *n2=Append(n,i);
        print(n2);
    }
    
    return 0;
}
